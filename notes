// src/App.tsx

import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  TextField,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  RadioGroup,
  FormControlLabel,
  Radio,
  Switch,
  Button,
  Typography,
  Box,
} from '@mui/material';

interface ManagerNoteProps {
  mode: 'create' | 'edit';
  initialData?: {
    accountNumber: string;
    reason: string;
    repeats: string;
    startDate: string;
    endDate: string;
    occurrences: string;
    recurring: boolean;
    addDueDate: boolean;
    comments: string;
  };
}

const ManagerNote: React.FC<ManagerNoteProps> = ({ mode, initialData }) => {
  const [accountNumber, setAccountNumber] = useState('');
  const [reason, setReason] = useState('Market Notes');
  const [repeats, setRepeats] = useState('Yearly');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [occurrences, setOccurrences] = useState('');
  const [recurring, setRecurring] = useState(true);
  const [addDueDate, setAddDueDate] = useState(false);
  const [comments, setComments] = useState('');

  useEffect(() => {
    if (mode === 'edit' && initialData) {
      setAccountNumber(initialData.accountNumber);
      setReason(initialData.reason);
      setRepeats(initialData.repeats);
      setStartDate(initialData.startDate);
      setEndDate(initialData.endDate);
      setOccurrences(initialData.occurrences);
      setRecurring(initialData.recurring);
      setAddDueDate(initialData.addDueDate);
      setComments(initialData.comments);
    }
  }, [mode, initialData]);

  const handleSubmit = () => {
    // Handle form submission
  };

  const handleReset = () => {
    setAccountNumber('');
    setReason('Market Notes');
    setRepeats('Yearly');
    setStartDate('');
    setEndDate('');
    setOccurrences('');
    setRecurring(true);
    setAddDueDate(false);
    setComments('');
  };

  return (
    <Container maxWidth="sm">
      <Box
        sx={{
          p: 3,
          borderRadius: 1,
          boxShadow: 3,
          backgroundColor: 'white',
          marginTop: 4,
        }}
      >
        <Typography variant="h5" component="h1" gutterBottom>
          {mode === 'create' ? 'Create New Manager\'s Note' : 'Edit Manager\'s Note'}
        </Typography>
        <Grid container spacing={2}>
          <Grid item xs={12}>
            <TextField
              label="Account Number"
              fullWidth
              value={accountNumber}
              onChange={(e) => setAccountNumber(e.target.value)}
              sx={{ mb: 2 }}
            />
          </Grid>
          <Grid item xs={12}>
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Reason for Request</InputLabel>
              <Select
                value={reason}
                onChange={(e) => setReason(e.target.value as string)}
              >
                <MenuItem value="Market Notes">Market Notes</MenuItem>
                <MenuItem value="Client Request">Client Request</MenuItem>
                <MenuItem value="Other">Other</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={6}>
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Repeats</InputLabel>
              <Select
                value={repeats}
                onChange={(e) => setRepeats(e.target.value as string)}
              >
                <MenuItem value="Yearly">Yearly</MenuItem>
                <MenuItem value="Monthly">Monthly</MenuItem>
                <MenuItem value="Weekly">Weekly</MenuItem>
                <MenuItem value="Daily">Daily</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={6}>
            <TextField
              label="Start Date"
              fullWidth
              type="date"
              InputLabelProps={{ shrink: true }}
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              sx={{ mb: 2 }}
            />
          </Grid>
          <Grid item xs={6}>
            <TextField
              label="End Date"
              fullWidth
              type="date"
              InputLabelProps={{ shrink: true }}
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              sx={{ mb: 2 }}
            />
          </Grid>
          <Grid item xs={6}>
            <TextField
              label="Occurrences"
              fullWidth
              type="number"
              value={occurrences}
              onChange={(e) => setOccurrences(e.target.value)}
              sx={{ mb: 2 }}
            />
          </Grid>
          <Grid item xs={12}>
            <FormControl component="fieldset" sx={{ mb: 2 }}>
              <RadioGroup
                row
                value={recurring ? 'recurring' : 'immediate'}
                onChange={(e) => setRecurring(e.target.value === 'recurring')}
              >
                <FormControlLabel
                  value="recurring"
                  control={<Radio />}
                  label="Recurring"
                />
                <FormControlLabel
                  value="immediate"
                  control={<Radio />}
                  label="Immediate"
                />
              </RadioGroup>
            </FormControl>
          </Grid>
          <Grid item xs={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={addDueDate}
                  onChange={(e) => setAddDueDate(e.target.checked)}
                />
              }
              label="Add Due Date"
            />
          </Grid>
          <Grid item xs={6}>
            {addDueDate && (
              <TextField
                label="Due Date"
                fullWidth
                type="date"
                InputLabelProps={{ shrink: true }}
                sx={{ mb: 2 }}
              />
            )}
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Comments"
              fullWidth
              multiline
              rows={4}
              value={comments}
              onChange={(e) => setComments(e.target.value)}
              sx={{ mb: 2 }}
            />
          </Grid>
          <Grid item xs={12} container justifyContent="flex-end">
            <Button variant="contained" color="primary" onClick={handleSubmit} sx={{ ml: 1 }}>
              {mode === 'create' ? 'Create' : 'Save'}
            </Button>
            <Button variant="outlined" onClick={handleReset} sx={{ ml: 1 }}>
              Reset
            </Button>
          </Grid>
        </Grid>
      </Box>
    </Container>
  );
};

const App: React.FC = () => {
  const initialData = {
    accountNumber: '123456',
    reason: 'Market Notes',
    repeats: 'Yearly',
    startDate: '2024-05-31',
    endDate: '2025-05-31',
    occurrences: '5',
    recurring: true,
    addDueDate: false,
    comments: 'Initial comment text',
  };

  return <ManagerNote mode="edit" initialData={initialData} />;
};

export default App;
